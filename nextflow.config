/*
========================================================================================
    salzmanlab/nomad Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                       = null
    dataset                     = "dataset"
    element_annotations_samplesheet     = null
    genome_index                = null
    transcriptome_index         = null
    gene_bed                    = null
    star_index                  = null
    gtf                         = null
    is_RNA_seq                  = false
    num_reads_first_pass        = 4000000
    num_reads_second_pass       = 4000000
    consensus_length            = 200
    kmer_size                   = 27
    anchor_mode                 = "tile"
    window_slide                = 5
    use_read_length             = true
    lookahead                   = null
    direction                   = "down"
    fdr_threshold               = 0.05
    run_type                    = "bulk"
    stratify_level              = 3
    anchor_batch_size           = 1000
    anchor_count_threshold      = 50
    K_num_hashes                = 10
    L_num_random_Cj             = 50
    anchor_unique_targets_threshold = 1
    anchor_samples_threshold    = 1
    anchor_sample_counts_threshold = 5
    num_decoy_anchors           = 1000
    anchors_file                = null

    is_10X                      = false
    is_RNAseq                  = false

    run_trimming                = false
    run_umitools                = true
    run_decoy                   = false
    run_annotations             = false
    run_anchor_target_counts    = false
    run_pvals_only              = false
    run_anchor_heatmaps         = false

    num_heatmap_anchors         = 100
    results_dir                 = null

    use_heatmap_anchor_list     = false
    heatmap_anchor_list         = null

    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false
    fasta                      = "genome.fa"

    // Trimming
    clip_r1                    = null
    clip_r2                    = null
    three_prime_clip_r1        = null
    three_prime_clip_r2        = null
    trim_nextseq               = null
    save_trimmed               = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,modules'
    enable_conda               = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                  = [:]
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '500.GB'
    max_cpus                   = 1
    max_time                   = '2400.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    horence {
        process.executor = 'slurm'
        process.clusterOptions      = '-p horence,quake,owners --requeue'
        process.queueSize           = 50
        process.pollInterval        = '3 min'
        process.dumpInterval        = '6 min'
        process.queueStatInterval   = '5 min'
        process.exitReadTimeout     = '13 min'
        process.submitRateLimit     = '5sec'
        process.errorStrategy       = { task.exitStatus in [130,140,143,137,104,134,139] ? 'retry' : 'finish' }
        process.maxRetries          = 3
        params.max_cpus             = 8
        params.element_annotations_samplesheet = "/oak/stanford/groups/horence/kaitlin/bowtie2_annotations/references/element_annotation_samplesheet.csv"
        params.genome_index                = "/oak/stanford/groups/horence/kaitlin/bowtie2_annotations/references/base_references/grch38_1kgmaj/grch38_1kgmaj"
        params.transcriptome_index         = "/oak/stanford/groups/horence/circularRNApipeline_Cluster/index/GRCh38.gencode.v31_transcriptome"
        params.gene_bed                    = "/oak/stanford/groups/horence/kaitlin/annotation_beds/cleaned_hg38_genes.bed"
        params.star_index                  = "/oak/stanford/groups/horence/Roozbeh/single_cell_project/SICILIAN_references/human/SICILIAN_human_hg38_Refs/star_ref_file/hg38_ERCC_STAR_2.7.5.a"
        params.gtf                         = "/oak/stanford/groups/horence/Roozbeh/single_cell_project/SICILIAN_references/human/SICILIAN_human_hg38_Refs/gtf_file/grch38_known_genes.gtf"
    }
    sherlock {
        process.executor = 'slurm'
        process.clusterOptions      = '-p owners,normal --requeue'
        process.queueSize           = 50
        process.pollInterval        = '3 min'
        process.dumpInterval        = '6 min'
        process.queueStatInterval   = '5 min'
        process.exitReadTimeout     = '13 min'
        process.submitRateLimit     = '5sec'
        process.memory              = { 20000.GB * task.attempt }
        process.time                = { 1000.h * task.attempt }
        process.errorStrategy       = { task.exitStatus in [130,140,143,137,104,134,139] ? 'retry' : 'finish' }
        process.maxRetries          = 3
        params.max_cpus             = 8
    }
    horence_quake {
        process.executor = 'slurm'
        process.clusterOptions      = '-p horence,quake --requeue'
        process.queueSize           = 50
        process.pollInterval        = '3 min'
        process.dumpInterval        = '6 min'
        process.queueStatInterval   = '5 min'
        process.exitReadTimeout     = '13 min'
        process.submitRateLimit     = '5sec'
        process.memory              = { 20000.GB * task.attempt }
        process.time                = { 1000.h * task.attempt }
        process.errorStrategy       = { task.exitStatus in [130,140,143,137,104,134,139] ? 'retry' : 'finish' }
        process.maxRetries          = 3
        params.max_cpus             = 8
        params.element_annotations_samplesheet = "/oak/stanford/groups/horence/kaitlin/bowtie2_annotations/references/bowtie2_index_samplesheet.csv"
        params.genome_index                = "/oak/stanford/groups/horence/kaitlin/bowtie2_annotations/references/base_references/grch38_1kgmaj/grch38_1kgmaj"
        params.transcriptome_index         = "/oak/stanford/groups/horence/circularRNApipeline_Cluster/index/GRCh38.gencode.v31_transcriptome"
        params.gene_bed                    = "/oak/stanford/groups/horence/kaitlin/annotation_beds/cleaned_hg38_genes.bed"
        params.star_index                  = "/oak/stanford/groups/horence/Roozbeh/single_cell_project/SICILIAN_references/human/SICILIAN_human_hg38_Refs/star_ref_file/hg38_ERCC_STAR_2.7.5.a"
        params.gtf                         = "/oak/stanford/groups/horence/Roozbeh/single_cell_project/SICILIAN_references/human/SICILIAN_human_hg38_Refs/gtf_file/grch38_known_genes.gtf"
    }
    conda {
        params.enable_conda         = true
        docker.enabled              = false
        singularity.enabled         = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    docker {
        process.container           = 'kaitlinchaung/nomad:v0.1'
        docker.enabled              = true
        docker.userEmulation        = true
        singularity.enabled         = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    singularity {
        process.container           = 'kaitlinchaung/nomad:v0.1'
        singularity.enabled         = true
        singularity.autoMounts      = true
        docker.enabled              = false
        podman.enabled              = false
        shifter.enabled             = false
        charliecloud.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
    name            = 'salzmanlab/nomad'
    author          = 'The Salzman Lab'
    homePage        = 'https://github.com/salzmanlab/nomad'
    description     = 'pass'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
